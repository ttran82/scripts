#cs
ScriptName: auto_TSReader_Recorder.au3
Tool to automate:  TSReaderPro capture functionalities
Input requirement:
   auto_TSReader_Recorder.au3 udpIp=[udpaddr] udpPort=<udpport> dataEth=[dataip] multicasttype=[udp/rtp] captureDur=[dur=60] loopCount=[loop=1] delayTime=[delay=0] outputFile=[outputname]
   <require argument>
 		<udpport> - port
   [optional argument]
		[udpIp] - unicast/multicast address.  Can be blank in case of unicast.  (Default = "")
		[dataEth] - Ip used to listen to destination ip (default = GUI selection)
		[multicastType] - upd/rtp multicast/unicast type (default = udp)
		[captureDur] - duratation of capture in seconds (default 60)
		[loopCount] - number of consecutive files to capture (default 1 seconds)
		[delayTime] - delay between capture when loopcount > 1.  (Default = 0 seconds)
		[outputFile] - capture file name. (Default = autogenerated file)
		[isVisible] - Start TSReaderPro in hidden or visible mode (Default = no)
		[checkCCErrors] - Perform CC error check while capture.  If CC errors is found -> capture will fail. (Default = yes)
		[capturePreroll] - Add additional seconds to captureDur (default = 2)
		[TailEncZenc] - If Enc is Modulus encoder product, a tail of the zenc log will capture during capture for later debug (default = no)
		[checkMulticast] - Perform multicast alive check before capture to make sure stream is present. (default = yes)
Output requirement:
		capture_file.ts
#ce

#include <..\KleverLib.au3>

;Global Common Defintions
;Global Defintions unique to this script only
If Not isDeclared("captureDur") Then
	Global $captureDur = 60
EndIf

If Not isDeclared("loopCount") Then
	Global $loopCount = 1
EndIf

If Not isDeclared("delayTime") Then
	Global $delayTime = 0
EndIf

if Not IsDeclared("isVisible") Then
	Global $isVisible = "no"
EndIf

;A very detail of usage for this script.
;The requirement only give the outline.
;This usage should give a complete description of every options in the command line
;First line should give the summary of the script
;Second line should be the full @scriptname with all possible arguments available
;The rest will explains what each argument means and how to use them.
Global $usageMsg=""&@crlf& _
			@scriptname&"    Records a stream using TSreaderPro and check for CC errors."&@crlf& _
			""&@crlf& _
			"General Syntax:"&@crlf& _
			@TAB&@scriptname&" udpIp=<udpaddr> udpPort=<udpport> multicasttype=[udp/rtp] captureDur=[dur=60] loopCount=[loop=1] delayTime=[delay=0] outputFile=[outputname]"&@crlf& _
			"Samples:"&@crlf& _
			@TAB&"Multicast capture: "&@scriptname&" udpIp=1.2.3.4 udpPort=5678 multicasttype=rtp/udp captureDur=60 loopCount==1 delayTime=0 outputFile=test"&@crlf& _
			@TAB&"Unicast capture: "&@scriptname&" udpIp=" & Chr(34) & Chr(34) & " udpPort=5678 multicasttype=udp/rtp captureDur=60 loopCount==1 delayTime=0 outputFile=test"&@crlf& _
			""&@crlf& _
			" [udpip]"&@TAB&@TAB&"[Required] Multicast Ip address.  Provide blank to perform unicast capture."&@crlf& _
			" <udpport>"&@TAB&"<Required> Multicast Port."&@crlf& _
			" [dataEth]"&@TAB&"[Optional] IP address of data Ethernet. Default = eth0."&@crlf& _
			" [multicasttype]"&@TAB&"[Optional] Default = udp."&@crlf& _
			" [captureDur]"&@TAB&"[Optional] Duration of record time in seconds. Default 60s."&@crlf& _
			" [serviceNum]"&@TAB&"This control the server number option (-a) of TSReader.  Default = 40"&@crlf& _
			" [loopCount]"&@TAB&"[Optional] Number of consecutive catpures. Default 1."&@crlf& _
			" [delayTime]"&@TAB&"[Optional] Delays between consecutive captures in seconds.  Default 0."&@crlf& _
			" [outputFile]"&@TAB&"[Optional] outputname.ts will be created.  If not specified tsReader_udpaddr_udpport_datestring.ts will be createdd"&@crlf& _
			" [outputEnable]"&@TAB&"[Optional] yes/no or 1/0.  Default = yes/1.  Set no/0 to turn file capture off, but analysis will still be done"&@crlf& _
			" [analysisOutput]"&@TAB&"[Optional] This will specify the name of TSReader analysis outputfile.  Default outputname.ts.html"&@crlf& _
			" [analysisOption]"&@TAB&"[Optional] This will control the options for -H and +H for TSReader."&@crlf& _
						@TAB&@TAB&"If leaving it empty.  -H option will be assumed, thus will report all information"&@crlf& _
						@TAB&@TAB&"To get only certain information follow TSReader +H syntax:"&@crlf& _
						@TAB&@TAB&"1-PAT, 2-PMT, 4-CAT, 8-NIT, 10-SDT, 20-EIT,40-SDT only for this mux,80-PID chart,100-thumbnails,200-MPEG-2 stats,400-source info."&@crlf& _
			" [isVisible]"&@TAB&"[Optional] Should TSReader be visible while recording [Yes/No]."&@crlf& _
			" [checkCCErrors]"&@TAB&"[Optional] Check for CC errors after captureing.  Default=yes."&@crlf& _
			" [capturePreroll]"&@TAB&"[Optional] TSReaderPro preroll in seconds duing capture.  Default is 2 seconds."&@crlf& _
			" [TailEncZenc]"&@TAB&"[Optional] yes/no.  This option will only work when encode under test is a Modulus encoder"&@crlf& _
			@TAB&@TAB&"This option can also invoked automatically by setting the env variable TailEncZenc=yes in the testcase"&@crlf& _
			" [checkMulticast]"&@TAB&"[Optional] yes/no.  Default=yes.  Set to skip multicast check"&@crlf& _
			" [TSReaderInstallDir]"&@TAB&"[Optional] Allow user to use a customized path of TSReader installation."&@crlf& _
			""

;Flow of the main program include 4 functions and are standard across all scripts.
;Everything action starts here

;This CheckArguments functions is where you determine if those parsed arguments satisfy your input and output requirements
CheckArguments()

ProgramStart()	;Start Function in Kleverlib.  Nothing you have to change here.

;Your main program
main()

ProgramEnd()	;End Function in Kleverlib.  Nothing you have to change here.

;Function Definitions

Func CheckArguments()
	;This check is standard.  Do not change
	if isDeclared ("usage") Then
		;this is the only time you will use consolewrite.  After Programe start, use Kconsolewrite will write to log
		consoleWrite($usageMsg)
		Exit
	EndIf

	;The rest of the check is to make sure input parameters are entered correctly and as expected.\
	;This is where you can also apply default values if they are not already done so in the Global definitions
	if not isDeclared("udpIp") Then
		AssignVariable("udpIp", "")
	EndIf

	if not IsDeclared("udpPort") Then
		KConsoleWrite("Missing Parameters",1)
	EndIf

	if not IsDeclared("capturePreroll") Then
		AssignVariable("capturePreroll", "2")
	EndIf

	If EnvGet("checkMulticast") == "" Then
		EnvSet("checkMulticast", "yes")
	EndIf

	if not IsDeclared("checkCCErrors") Then
		AssignVariable("checkCCErrors", "yes")
	EndIf

	if not IsDeclared("multicasttype") Then
		AssignVariable("multicasttype", "udp")
	EndIf

	If (not (EnvGet("multicasttype") == "udp")) and (not (EnvGet("multicasttype") == "rtp" ))Then
		KConsoleWrite("Wrong parameters for multicasttype: udp or rtp only.",1)
	EndIf

	If not IsDeclared("serviceNum") Then
		AssignVariable("serviceNum", "40")
	EndIf

	If not IsDeclared("outputEnable") Then
		AssignVariable("outputEnable", "yes")
	EndIf

	;User can override this path by setting this in SystemConfig.  TSReaderProInstallDir=
	If EnvGet("TSReaderInstallDir") == "" Then
		AssignVariable("TSReaderInstallDir", @ProgramFilesDir & "\COOL.STF\TSReaderPro")
		KConsoleWrite("Using Default TSReader Dir: " & EnvGet("TSReaderInstallDir"),0,2)
	EndIf
	Global $tsreaderpath = EnvGet("TSReaderInstallDir") & "\" & "TSReaderPro.exe"
	KConsoleWrite("Detected TSReader Dir: " & EnvGet("TSReaderInstallDir"),0,2)

	If Not FileExists($tsreaderpath) Then
		KConsoleWrite($tsreaderpath&" is not found.",1)
	EndIf
	KConsoleWrite("TSReader Path: " & $tsreaderpath,0,2)

EndFunc

Func main()
	AutoTSreaderRecorder()
EndFunc

Func AutoTSreaderRecorder()
	local $mycommand
	Local $TSReaderCaplog
	Local $TSReaderCapfile

	For $x = 1 to  $loopCount
		local $outputname = "tsReader_"&$udpIp&"_"&$udpPort&"_"&DateString()

		if (IsDeclared("outputFile")) Then
			if ($loopCount = 1) Then
				$outputname = $outputFile
			Else
				$outputname = $outputFile&"_"&$x
			EndIf
		EndIf

		$TSReaderCapfile = $outputname&".ts"
		$TSReaderCaplog = $TSReaderCapfile&".html"

		;Find out which TSReaderProfile to use
		local $TSReaderProfile = EnvGet("tsReaderUDPMulticast")
		If EnvGet("multicasttype") == "udp" Then
			If EnvGet("udpIp") == "" Then
				$TSReaderProfile = EnvGet("tsReaderUDPUnicast")
			Else
				$TSReaderProfile = EnvGet("tsReaderUDPMulticast")
			EndIf
		EndIf

		If EnvGet("multicasttype") == "rtp" Then
			If EnvGet("udpIp") == "" Then
				$TSReaderProfile = EnvGet("tsReaderRTPUnicast")
			Else
				$TSReaderProfile = EnvGet("tsReaderRTPMulticast")
			EndIf
		EndIf

		;TSReader options
		local $tsreaderHoption = "-H"
		If EnvGet("analysisOption") <> ""  Then
			$tsreaderHoption = "-H+ "& EnvGet("analysisOption")
		EndIf

		local $tsreaderFileOption = " -a "&$servicenum&" "&$TSReaderCapfile&" "&($CaptureDur+10)
		If EnvGet("outputEnable") == "0" or EnvGet("outputEnable") == "no" Then
			$tsreaderFileOption = ""
			KConsoleWrite("Capture file is disabled.",0, 2)
		EndIf

		If StringInStr($isVisible, "yes") Then
			$mycommand=Chr(34) & $tsreaderpath & Chr(34) &" -L "& $TSReaderProfile &" -H "&$TSReaderCaplog&" -y "&($CaptureDur+EnvGet("capturePreroll"))&$tsreaderFileOption&" "&$udpIp&" "&$udpPort&" "&$dataEth
		Else
			$mycommand=Chr(34) & $tsreaderpath & Chr(34) &" -Mm -L "&$TSReaderProfile &" -H "&$TSReaderCaplog&" -y "&($CaptureDur+EnvGet("capturePreroll"))&$tsreaderFileOption&" "&$udpIp&" "&$udpPort&" "&$dataEth
		EndIf


		if CheckMulticastAddr($udpIp, $udpPort, 2) = 0 Then
			;if Multicast address is reachable
			If EnvGet("TailEncZenc") = "yes" and EnvGet("EncMade") = "Modulus" Then
				local $tailcmd = "tail -F /var/log/zenc > /tmp/myzenc"
				RunSecureTestScript($tailcmd,$kleverCurrentDepotDir,0)
				local $mypid = EnvGet("CurrentRunningPID")
			EndIf
			RunCommand($mycommand,@WorkingDir,1,0)

			WriteTSplaylist($TSReaderCapfile)

			ParseTSReaderHtml($TSReaderCaplog)
			If EnvGet("TailEncZenc") = "yes" and EnvGet("EncMade") = "Modulus" Then
				;First close the tail command
				local $tailcmd = "killall -9 tail"
				RunSecureTestScript($tailcmd,$kleverCurrentDepotDir,1)
				local $getscript = "/tmp/myzenc"
				RunSecureGetScript($getscript,$kleverCurrentDir)
				;Now Check if the file existed
				local $myzenc = $kleverCurrentDir&"\myzenc"
				If FileExists($myzenc) Then
					;copy the zenc log to final destination
					local $newzenc = $kleverCurrentDir&"\"&$TSReaderCapfile&".zenc"
					FileMove($myzenc, $newzenc)
				Else
					KConsoleWrite("Failed to get zenc log from encoder.")
				EndIf
			EndIf
		Else
			;if not create an empty file
			$TSReaderCapfile = "failed_"&$TSReaderCapfile
			_FileCreate(@WorkingDir&"\"&$TSReaderCapfile)
		EndIf

		If EnvGet("outputEnable") == "1" or EnvGet("outputEnable") == "yes" Then
			UpdateLastFile($TSReaderCapfile)
		EndIf

		sleep($delayTime*1000)
	Next
EndFunc

Func WriteTSplaylist($tsfile)
	if FileExists($tsfile) Then
		FileWriteLine(@WorkingDir&"\"&@ScriptName&".m3u",@WorkingDir&"\"&$tsfile&@CRLF)
	EndIf
	KConsoleWrite("Capture Done"&@CRLF,0,2)
EndFunc

;looks for any errros
;later, Video Type:AVC vs MPEG2, bitrate; Audio Type: Codec, bitrate, language, and descriptor
Func ParseTSReaderHtml($file)
	Local $reportarray
	If Not FileExists($file) Then
		KConsoleWrite($file&"TT is not exist",0,2)
	EndIf

	Html2Text(@WorkingDir&"\"&$file)
	$reportarray= KFileReadToArray($file&".txt")
	$tserror=KFileOpen($file&".error",1)

		For $x=1 to $reportarray[0]
			$reporterrorArg = StringInStr($reportarray[$x], "Continuity errors:")
			If ($reporterrorArg) Then
				CheckCCErrors($reportarray[$x])
				FileWriteLine($tserror,$reportarray[$x])
			EndIf

			$reporterrorArg = StringInStr($reportarray[$x], "TEI errors:")
			If ($reporterrorArg) Then
				FileWriteLine($tserror,$reportarray[$x])
			EndIf

			$reporterrorArg = StringInStr($reportarray[$x], "Sync Losses:")
			If ($reporterrorArg) Then
				FileWriteLine($tserror,$reportarray[$x])
			EndIf
		Next
	FileClose($tserror)
EndFunc

Func Html2Text($htmlfile)
	local $lynxcmd = "lynx.exe"
	local $mycmd = $lynxcmd & " -term TERM -dump " & $htmlfile & " > " & $htmlfile & ".txt"
	RunWait("cmd /c "& $mycmd, @WorkingDir)
EndFunc

Func CheckCCErrors($string)
	If EnvGet("CheckCCErrors") == "yes" Then
		local $reporterrorArg = StringStripWS($string, 8)
		$reporterrorArg = StringReplace($reporterrorArg, "Continuityerrors:", "")

		If ($reporterrorArg > 0) Then
			Kconsolewrite("Capture contained " & $reporterrorArg & " CC errors.")
			$programExitCode = 1;
		Else
			Kconsolewrite("Capture contained 0 CC errors.", 0, 2)
		EndIf
	Else
		Kconsolewrite("Donot check for CC errors.", 0, 2)
	Endif
EndFunc
